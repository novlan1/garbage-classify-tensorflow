{"version":3,"sources":["intro.js","App.js","index.js"],"names":["icon","color","info","beforeUpload","file","isJpgOrPng","type","message","error","isLt2M","size","file2img","Promise","resolve","reader","FileReader","readAsDataURL","onload","e","img","document","createElement","src","target","result","width","height","img2X","tf","fromPixels","toFloat","sub","div","reshape","App","props","handleChange","status","callback","addEventListener","getBase64","originFileObj","imageUrl","setState","loading","console","log","onPredict","predictRes","a","x","model","predict","pred","print","res","arraySync","map","score","index","label","classes","sort","b","onHandlePredictResult","data","item","typeIntroObj","intro","percent","parseInt","state","this","summary","classesJSON","className","accept","showUploadList","onChange","style","marginTop","length","display","marginLeft","margin","predictItem","React","PureComponent","ReactDom","render","getElementById"],"mappings":"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","file":"static/js/main.983229f9.chunk.js","sourcesContent":["export default {\n  \"有害垃圾\": {\n    icon: 'https://lajifenleiapp.com/static/svg/2v_B43953.svg',\n    color:'#B43953',\n    info: '是指生活垃圾中对人体健康或者自然环境造成直接或者潜在危害的物质，包括废充电电池、废扣式电池、废灯管、弃置药品、废杀虫剂(容器)、废油漆(容器)、废日用化学品、废水银产品、废旧电器以及电子产品等。'\n  },\n  \"可回收物\": {\n    icon: 'https://lajifenleiapp.com/static/svg/1_3F6BA8.svg',\n    color:'#3F6BA8',\n    info: '是指在日常生活中或者为日常生活提供服务的活动中产生的，已经失去原有全部或者部分使用价值，回收后经过再加工可以成为生产原料或者经过整理可以再利用的物品，包括废纸类、塑料类、玻璃类、金属类、织物类等。'\n  },\n  \"厨余垃圾\": {\n    icon: 'https://lajifenleiapp.com/static/svg/3v_48925B.svg',\n    color:'#48925B',\n    info: '是指居民日常生活中产生的有机易腐垃圾，包括菜叶、剩菜、剩饭、果皮、蛋壳、茶渣、骨头等。'\n  },\n  \"其他垃圾\": {\n    icon: 'https://lajifenleiapp.com/static/svg/4_89918B.svg',\n    color:'#89918B',\n    info: '是指除可回收物、有害垃圾和厨余垃圾之外的，混杂、污染、难分类的其他生活垃圾。'\n  },\n\n\n}","import React from \"react\";\nimport { Button, Upload, message, Progress } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport typeIntroObj from \"./intro\";\nimport classesJSON from \"./output/classes.json\";\n\n\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst MODEL_DATA_URL = 'https://novlan1.github.io/garbage-classify-tensorflow/my-app/src/output/model.json' // 'https://github.com/novlan1/garbage-classify-tensorflow/tree/master/my-app/src/output/model.json'; // 'http://model.uwayfly.com/model.json' // \"http://127.0.0.1:8080/model.json\";\n// const CLASSES_DATA_URL = \"http://127.0.0.1:8080/classes.json\";\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener(\"load\", () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n\n  if (!isJpgOrPng) {\n    message.error(\"You can only upload JPG/PNG file!\");\n  }\n\n  const isLt2M = file.size / 1024 / 1024 < 2;\n\n  if (!isLt2M) {\n    message.error(\"Image must smaller than 2MB!\");\n  }\n\n  return isJpgOrPng && isLt2M;\n}\n\nfunction file2img(file) {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      const img = document.createElement(\"img\");\n      img.src = e.target.result;\n      img.width = 224;\n      img.height = 224;\n      img.onload = () => resolve(img);\n    };\n  });\n}\n\nfunction img2X(img) {\n  return tf.tidy(() => {\n    return tf.browser\n      .fromPixels(img)\n      .toFloat()\n      .sub(255 / 2)\n      .div(255 / 2)\n      .reshape([1, 224, 224, 3]);\n  });\n}\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      predictRes: [],\n    };\n  }\n\n  async componentDidMount() {\n    this.model = await tf.loadLayersModel(MODEL_DATA_URL);\n    this.model.summary();\n    this.classes = classesJSON; // await fetch(CLASSES_DATA_URL).then((res) => res.json());\n  }\n\n  handleChange = (info) => {\n    if (info.file.status === \"uploading\") {\n      this.setState({\n        loading: true,\n        imageUrl: null,\n        predictRes: [],\n      });\n      return;\n    }\n\n    // if (info.file.status === \"done\") {\n    getBase64(info.file.originFileObj, (imageUrl) => {\n      this.setState({\n        imageUrl,\n        loading: false,\n      });\n    });\n    // }\n    console.log(info);\n    this.onPredict(info.file.originFileObj);\n  };\n\n  onPredict = async (file) => {\n    const img = await file2img(file);\n\n    const pred = await tf.tidy(() => {\n      // 输入张量\n      const x = img2X(img);\n      return this.model.predict(x);\n    });\n\n    pred.print();\n\n    const res = pred\n      .arraySync()[0]\n      .map((score, index) => {\n        return {\n          score,\n          label: this.classes[index],\n        };\n      })\n      .sort((a, b) => b.score - a.score);\n\n    console.log(res);\n    this.onHandlePredictResult(res);\n  };\n\n  onHandlePredictResult = (data) => {\n    const predictObj = [];\n    data.map((item) => {\n      if (typeIntroObj[item.label]) {\n        item.icon = typeIntroObj[item.label][\"icon\"];\n        item.color = typeIntroObj[item.label][\"color\"];\n        item.intro = typeIntroObj[item.label][\"info\"];\n        item.percent = parseInt(item.score * 100);\n      }\n    });\n    this.setState({\n      predictRes: data,\n    });\n    console.log(data);\n  };\n\n  render() {\n    const { imageUrl, predictRes } = this.state;\n\n    return (\n      <div className=\"wrap\">\n        <Upload\n          // action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n          accept=\"image/*\"\n          showUploadList={false}\n          beforeUpload={beforeUpload}\n          onChange={this.handleChange}\n          className=\"upload\"\n        >\n          <Button\n            type=\"primary\"\n            style={{ width: \"calc(100vw - 5rem)\", marginTop: \"1rem\" }}\n          >\n            上传\n          </Button>\n        </Upload>\n\n        <div>\n          {imageUrl && (\n            <img src={imageUrl} style={{ width: \"100%\", marginTop: \"1rem\" }} />\n          )}\n        </div>\n\n        <div style={{ marginTop: \"1rem\" }}>\n          <div>识别结果：</div>\n          {!!predictRes.length && (\n            <div style={{ display: \"flex\" }}>\n              <span>\n                <img className=\"garbage-type\" src={predictRes[0].icon} />\n              </span>\n              <span\n                style={{ marginLeft: \"0.2rem\", color: predictRes[0].color }}\n              >\n                <h4 style={{ color: predictRes[0].color }}>\n                  {predictRes[0].label}\n                </h4>\n                <span>{predictRes[0].intro}</span>\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div style={{ margin: \"1rem 0\" }}>\n          <div className=\"type-row\">\n            <span className=\"type-row-left\">类别</span>\n            <span className=\"type-row-right\">匹配度</span>\n          </div>\n          {!!predictRes.length &&\n            predictRes.map((predictItem) => (\n              <div className=\"type-row\" key={predictItem.label}>\n                <span className=\"type-row-left\">{predictItem.label}</span>\n                <span className=\"type-row-right\">\n                  <Progress percent={predictItem.percent} />\n                </span>\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from './App'\n\nReactDom.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}